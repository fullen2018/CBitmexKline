package org.superl.exchange.CBitmexKline.core;/*    CBitmexKline    Created by superl on 2018/5/23.                                                                      00000                                                                           00000                                                                           00000           00000000    00000  00000  00000000000     00000000    000000000 00000          00000000000  00000  00000  000000000000   00000000000  000000000 00000          00000  000   00000  00000  000000 00000  000000 00000  00000000  00000          000000000    00000  00000  00000   0000  0000000000000 000000    00000           0000000000  00000  00000  00000   00000 0000000000000 00000     00000              0000000  00000  00000  00000   00000 00000         00000     00000          00000  0000  000000000000  000000000000  000000000000  00000     00000          00000000000  000000000000  000000000000   00000000000  00000     00000           000000000   0000000000    00000000000     00000000    00000     00000                                     00000                                                                           00000                 Team:bbs.nepenthes.cn                                       00000                                           */import com.alibaba.fastjson.JSONObject;import lombok.extern.log4j.Log4j;import org.superl.exchange.CBitmexKline.beans.Ticket;import org.superl.exchange.CBitmexKline.utils.HttpUtil;import java.util.HashMap;import java.util.List;import java.util.Map;@Log4jpublic class CollectService extends Thread{    private String baseUrl = "https://www.bitmex.com/api/v1/trade/bucketed";    private static Map<String,String> properties = new HashMap<>();    private Map<String,String> params = new HashMap<>();    //开始条数    private static int crrentPage = 1;    public CollectService(Map<String,String> properties){        this.properties = properties;    }    public void run(){        log.info("Start collect service...");        log.debug(properties);        int threadNum;        if(properties.get("thread")!=null){            threadNum = Integer.parseInt(properties.get("thread"));        }else{            threadNum = 50;        }        while(true) {            params = this.getParamsMap(getStart(crrentPage));            String paramsText = HttpUtil.generateParameters(params);            String url = baseUrl + paramsText;            log.debug("当前采集第："+crrentPage+"页");            log.debug("当前采集地址："+url);            //开始采集            String responseText = HttpUtil.doGet(baseUrl, params);            List<Ticket> ticketList = null;            if (!"".equals(responseText)) {                //开始反序列化JSON                try{                    ticketList = JSONObject.parseArray(responseText, Ticket.class);                    int count = Integer.parseInt(properties.get("count"));                    if (ticketList != null && ticketList.size() == count ) {                        //开始入库                        new SaveData(ticketList, threadNum);                        //log.debug(ticketList.get(0).getSymbol());                        //log.debug(ticketList.get(0).getHigh());                        //页码加1                        crrentPage = crrentPage + 1;                        //设定延迟                        try {                            Thread.sleep(Integer.parseInt(properties.get("sleep")));                        } catch (InterruptedException e) {                            log.error(e.getMessage());                        }                    }else{                        if(ticketList.size()>=1){                            log.info("当前页面数据还没有更新完毕！等待更新完毕再进行采集");                            try {                                Thread.sleep(60000);                            } catch (Exception e) {                                log.debug(e.getMessage());                            }                        }else{                            log.info("数据已经采集完毕！等待数据源更新");                            try {                                Thread.sleep(60000);                            } catch (Exception e) {                                log.debug(e.getMessage());                            }                        }                    }                }catch (Exception e){                    log.error(e.getMessage());                }            } else {                log.debug("网络访问异常，没有获取到数据!继续重试！");                try {                    Thread.sleep(3000);                } catch (Exception e) {                    log.debug(e.getMessage());                }            }        }    }    private int getStart(int page){        int pageCount = Integer.parseInt(properties.get("count"));        int startColumn = pageCount * (page-1);        return startColumn;    }    /**     * 生成参数     *     * @param start  开始条数     */    private Map<String,String> getParamsMap(int start){        params.put("binSize",properties.get("binSize"));        params.put("symbol",properties.get("symbol"));        params.put("count",properties.get("count"));        params.put("startTime",properties.get("startTime"));        if(!"".equals(properties.get("endTime"))){            params.put("endTime",properties.get("endTime"));        }        params.put("start",String.valueOf(start));        params.put("reverse","false");        params.put("partial","false");        return params;    }}